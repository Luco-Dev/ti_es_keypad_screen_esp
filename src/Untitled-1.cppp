#include <Wire.h>
#include <Keypad.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>
#include <LiquidCrystal_I2C.h>
#include <stdio.h>
#include <string.h>

#define I2C_ADDRESS 0x08  // Arduino's I2C address
#define SSD1306_I2C_ADDRESS 0x3C
#define LCD_I2C_ADDRESS 0x27  // Change this if needed for your LCD

const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
{'1', '2', '3', 'A'},
{'4', '5', '6', 'B'},
{'7', '8', '9', 'C'},
{'*', '0', '#', 'D'}
};

byte rowPins[ROWS] = {2, 3, 4, 5};
byte colPins[COLS] = {7, 6, 8, 9};
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

String receivedData = "";
char lastKey = '\0';
String targetDevice = "both"; // Options: "oled", "lcd", "both"

Adafruit_SSD1306 display(128, 64, &Wire, -1);
LiquidCrystal_I2C lcd(LCD_I2C_ADDRESS, 16, 2);

bool runOnce = true;  // Flag to ensure the loop runs only once

void receiveEvent(int bytes);
void sendKey();

void setup() {
Wire.begin(I2C_ADDRESS);
Wire.onReceive(receiveEvent);
Wire.onRequest(sendKey);
Serial.begin(9600);

if (!display.begin(SSD1306_I2C_ADDRESS, 0x3C)) {
Serial.println(F("SSD1306 allocation failed"));
for (;;);
}

lcd.init();
lcd.backlight();

display.display();
//delay(2000);
display.clearDisplay();
display.setTextSize(1);
display.setTextColor(SSD1306_WHITE);
display.setCursor(0, 0);

lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Ready");
}

void centerAndDisplayText(String text, int textSize) {
if (text.indexOf("oled:") != -1) {
targetDevice = "oled";
} else if (text.indexOf("lcd:") != -1) {
targetDevice = "lcd";
} else if (text.indexOf("both:") != -1) {
targetDevice = "both";
}
if (targetDevice == "oled" || targetDevice == "both") {
int16_t x0, y0;
uint16_t w, h;
display.setTextSize(textSize);
display.getTextBounds(text.c_str(), 0, 0, &x0, &y0, &w, &h);
int cursorX = (128 - w) / 2;
int cursorY = (64 - h) / 2;
display.clearDisplay();
display.setCursor(cursorX, cursorY);
display.print(text);
display.display();
}

if (targetDevice == "lcd" || targetDevice == "both") {
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("test");
// if (text.length() > 16) {
//   lcd.setCursor(0, 1);
//   lcd.print(text.substring(16, 32));
// }
}
}

void loop() {
char key = keypad.getKey();
if (key) {
lastKey = key;
Serial.print("Key Pressed: ");
Serial.println(key);
centerAndDisplayText(String(key), 2);
}

if (runOnce){
  Serial.println("Received message = " + receivedData);
  centerAndDisplayText(receivedData, 2);
  receivedData = "";
  runOnce = false;
}
}

void receiveEvent(int bytes) {
// Clear the received data on each new event
while (Wire.available()) {
char c = Wire.read();
if (c != '\0') {
receivedData += c;  // Accumulate characters in the string
}
}

// Check if the message contains the target device identifier and process it
runOnce = true;
}

void sendKey() {
Wire.write(lastKey);
lastKey = '\0';
}